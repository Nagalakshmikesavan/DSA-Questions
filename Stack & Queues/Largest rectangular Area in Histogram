class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int n=heights.length;
        int maxArea = 0;
        for(int i=0;i<=n;i++)
        {
            int currentheight = i==n ? 0 : heights[i];
            while(!st.isEmpty() && heights[st.peek()]>currentheight)
            {
                int top = st.pop();
                int width = st.isEmpty() ? i : i - st.peek() -1;
                //System.out.println(width);
                int area = heights[top] * width;
                maxArea = Math.max(maxArea,area);
                 //System.out.println(maxArea);
            }
            st.push(i);
        }
        return maxArea;
        
        
    }
}

Time Complexity : O(n)
Space Complexity : O(n)
