class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n-k]; 
    }
}
Time Complexity : O(nlogn)

Using QuickSort

class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSort(nums,0,nums.length-1,k);
    }
    public int quickSort(int nums[],int low, int high, int k)
    {
        int pivot = nums[high];
        int n = nums.length;
        int i = low-1;
        for(int j = low;j<nums.length-1;j++ )
        {
            if(nums[j]<pivot)
            {
                i++;
                swap(nums,i,j);
            }
        }
        swap(nums,i+1,high);
        int p = i+1;
        if(p==n-k)
            return nums[p];
        else if(p>n-k)
            return quickSort(nums,low,p-1,k);
      
        return quickSort(nums,p+1,high,k);
        
    }
    
    static void swap(int nums[],int i,int j)
    {
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Time Complexity : O(n) on an Average.
