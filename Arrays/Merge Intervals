class Solution {
    public int[][] merge(int[][] intervals) {
       
        
        Arrays.sort(intervals,(i1,i2) -> i1[0]-i2[0]);
        List<int[]> res = new ArrayList<>();
        res.add(intervals[0]);
        int j = 0;
        for(int i=1;i<intervals.length;i++)
        {
            int[] newinterval = res.get(j);
            if(intervals[i][0]<=newinterval[1])
                newinterval[1]=Math.max(newinterval[1],intervals[i][1]);
            else{
                res.add(intervals[i]);
                j++;
            }
        }
        int arr[][] = new int[j+1][2];
        for(int i=0;i<res.size();i++)
        {
            arr[i] = res.get(i);
        }
        return arr;
}
}

Time Complexity : O(nlogn)

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
